# SOME DESCRIPTIVE TITLE.
# Copyright (C) Graphene 2016
# This file is distributed under the same license as the Graphene package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Graphene 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-09-02 11:47+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../testing/index.rst:3
msgid "Testing in Graphene"
msgstr "在Graphene中进行测试"

#: ../../testing/index.rst:6
msgid ""
"Automated testing is an extremely useful bug-killing tool for the modern "
"developer. You can use a collection of tests – a test suite – to solve, "
"or avoid, a number of problems:"
msgstr ""
"对于现代的开发者来说，自动化测试是一个非常有用的bug-killing工具。"
"你可以使用一系列的测试-测试套件-来解决或避免一些问题。"

#: ../../testing/index.rst:8
msgid ""
"When you’re writing new code, you can use tests to validate your code "
"works as expected."
msgstr "当你编写新的代码时，你可以使用测试来验证你的代码是否按预期运行。"

#: ../../testing/index.rst:9
msgid ""
"When you’re refactoring or modifying old code, you can use tests to "
"ensure your changes haven’t affected your application’s behavior "
"unexpectedly."
msgstr ""
"当你重构或修改旧代码时，你可以使用测试来确保你的改变没有意外地影响你的应用程序的行为。"

#: ../../testing/index.rst:11
msgid ""
"Testing a GraphQL application is a complex task, because a GraphQL "
"application is made of several layers of logic – schema definition, "
"schema validation, permissions and field resolution."
msgstr ""
"测试GraphQL应用程序是一项复杂的任务，因为GraphQL应用程序是由几层逻辑组成的"
"-模式(schema)定义、模式(schema)验证、权限和字段解析。"

#: ../../testing/index.rst:13
msgid ""
"With Graphene test-execution framework and assorted utilities, you can "
"simulate GraphQL requests, execute mutations, inspect your application’s "
"output and generally verify your code is doing what it should be doing."
msgstr ""
"通过Graphene测试执行框架和各种工具，你可以模拟GraphQL请求，执行突变，检查你的应用程序的输出，"
"并普遍验证你的代码正在做它应该做的事情。"

#: ../../testing/index.rst:17
msgid "Testing tools"
msgstr "测试工具"

#: ../../testing/index.rst:19
msgid ""
"Graphene provides a small set of tools that come in handy when writing "
"tests."
msgstr "Graphene提供了一小套工具，在编写测试时很方便。"

#: ../../testing/index.rst:23
msgid "Test Client"
msgstr "测试客户端"

#: ../../testing/index.rst:25
msgid ""
"The test client is a Python class that acts as a dummy GraphQL client, "
"allowing you to test your views and interact with your Graphene-powered "
"application programmatically."
msgstr ""
"测试客户端是一个Python类，作为一个虚拟的GraphQL客户端，允许你测试你的视图并以编程方式"
"与你的Graphene驱动的应用程序进行交互。"

#: ../../testing/index.rst:27
msgid "Some of the things you can do with the test client are:"
msgstr "你可以用测试客户端做的一些事情是："

#: ../../testing/index.rst:29
msgid "Simulate Queries and Mutations and observe the response."
msgstr "模拟查询和突变，并观察它的响应。"

#: ../../testing/index.rst:30
msgid ""
"Test that a given query request is rendered by a given Django template, "
"with a template context that contains certain values."
msgstr ""
"测试一个给定的查询请求是否由一个给定的Django模板呈现，模板上下文是否包含某些值。"

#: ../../testing/index.rst:34
msgid "Overview and a quick example"
msgstr "概述和一个简单的例子"

#: ../../testing/index.rst:36
msgid ""
"To use the test client, instantiate ``graphene.test.Client`` and retrieve"
" GraphQL responses:"
msgstr "要使用测试客户端，实例化 ``graphene.test.Client`` 并获取GraphQL响应。"


#: ../../testing/index.rst:54
msgid "Execute parameters"
msgstr "执行参数"

#: ../../testing/index.rst:56
msgid ""
"You can also add extra keyword arguments to the ``execute`` method, such "
"as ``context``, ``root``, ``variables``, ...:"
msgstr "你也可以给 ``execute`` 方法添加额外的关键字参数，如 ``context`` 、 ``root`` 、 ``variables`` ...:"

#: ../../testing/index.rst:75
msgid "Snapshot testing"
msgstr "快照测试"

#: ../../testing/index.rst:77
msgid ""
"As our APIs evolve, we need to know when our changes introduce any "
"breaking changes that might break some of the clients of our GraphQL app."
msgstr ""
"随着我们的API的发展，我们需要知道我们的变化何时引入任何可能破坏我们GraphQL应用程序的"
"一些客户端的破坏性变化。"

#: ../../testing/index.rst:80
msgid ""
"However, writing tests and replicating the same response we expect from "
"our GraphQL application can be a tedious and repetitive task, and "
"sometimes it's easier to skip this process."
msgstr ""
"然而，编写测试和复制我们期望从GraphQL应用程序获得的相同响应可能是一项繁琐和重复的任务，"
"有时跳过这个过程会更容易。"

#: ../../testing/index.rst:83
msgid ""
"Because of that, we recommend the usage of `SnapshotTest "
"<https://github.com/syrusakbary/snapshottest/>`_."
msgstr "正因为如此，我们推荐使用 `SnapshotTest <https://github.com/syrusakbary/snapshottest/>`_ 。"

#: ../../testing/index.rst:85
msgid ""
"SnapshotTest lets us write all these tests in a breeze, as it "
"automatically creates the ``snapshots`` for us the first time the test "
"are executed."
msgstr ""
"SnapshotTest让我们轻而易举地编写所有这些测试，因为它在第一次执行测试时自动为我们创建 ``snapshots`` 。"

#: ../../testing/index.rst:89
msgid "Here is a simple example on how our tests will look if we use ``pytest``:"
msgstr "下面是一个简单的例子，如果我们使用 ``pytest`` ，我们的测试会是什么样子:"

#: ../../testing/index.rst:101
msgid "If we are using ``unittest``:"
msgstr "如果我们使用 ``unittest`` :"

